# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

[[ -n "$__Y_BASHRC" ]] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# force xterm-24bits if support 256color
[[ $(tput colors 2>/dev/null) == 256 ]] &&
    export TERM=xterm-24bits

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-*) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# if [ "$color_prompt" = yes ]; then
#     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ '
# else
#     PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
# fi
IP=$(ip a l | grep "scope global" | sed 's/.*inet //g; s/\/.*//g')
export PS1="\e[1;37m[\e[m\e[1;32m\u\e[m\e[1;33m@\e[m\e[1;35m\h{$IP}\e[m \e[01;36m\w \e[m\e[1;37m] \e[34;0m<\D{%F %T}>\e[m\e[1;36m\e[m\n$ "
unset color_prompt force_color_prompt

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f "$HOME/.bash_alias" ]; then
    source "$HOME/.bash_alias"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

function __y_func_emacs()
{
    local x=$(which emacsclient)
    local d="$HOME/bin"
    local f="$d/emacsc"
    [ -z "$x" ] && return 0
    [ -e "$f" ] || {
        mkdir -p "$d" 2>/dev/null
        ln -sv $x $d/emacsc >/dev/null
    }

    alias e="$f -t"
    alias ec="$f -t"
    alias et="$f -t"
    alias eg="(exec $f -c >/dev/null 2>&1 &)"

    export ALTERNATE_EDITOR=vim
    export EDITOR=e
}
__y_func_emacs
unset -f __y_func_emacs

alias evince='evince --fullscreen'

# cursor shaped and color
# https://linuxgazette.net/137/anonymous.html
# 2-bar; q-exit; 12;DarkOrange1-Color
printf "\e[2 q\e]12;DarkOrange1\a"

# Heavy use tmux. create default session
function __y_func_tmux()
{
    local x

    # started
    tmux ls >/dev/null 2>&1 && return

    for x in code lesson kernel misc; do
        tmux new-session -d -s "$x" 2>/dev/null
    done
}
__y_func_tmux
unset -f __y_func_tmux
[ -n "$RUN_TMUX" ] && { unset RUN_TMUX; exec tmux; }

# setxkbmap -option "ctrl:swapcaps"
export __Y_BASHRC=1
